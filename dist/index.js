!function(t,e){if("object"==typeof exports&&"object"==typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var r=e();for(var n in r)("object"==typeof exports?exports:t)[n]=r[n]}}(window,(function(){return function(t){var e={};function r(n){if(e[n])return e[n].exports;var o=e[n]={i:n,l:!1,exports:{}};return t[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}return r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)r.d(n,o,function(e){return t[e]}.bind(null,o));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=0)}([function(t,e,r){"use strict";var n=this&&this.__assign||function(){return(n=Object.assign||function(t){for(var e,r=1,n=arguments.length;r<n;r++)for(var o in e=arguments[r])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)},o=this&&this.__awaiter||function(t,e,r,n){return new(r||(r=Promise))((function(o,i){function u(t){try{c(n.next(t))}catch(t){i(t)}}function a(t){try{c(n.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?o(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(u,a)}c((n=n.apply(t,e||[])).next())}))},i=this&&this.__generator||function(t,e){var r,n,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;u;)try{if(r=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return u.label++,{value:i[1],done:!1};case 5:u.label++,n=i[1],i=[0];continue;case 7:i=u.ops.pop(),u.trys.pop();continue;default:if(!(o=u.trys,(o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){u=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){u.label=i[1];break}if(6===i[0]&&u.label<o[1]){u.label=o[1],o=i;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(i);break}o[2]&&u.ops.pop(),u.trys.pop();continue}i=e.call(t,u)}catch(t){i=[6,t],n=0}finally{r=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}};Object.defineProperty(e,"__esModule",{value:!0}),e.KMRouter=void 0;var u=r(1),a=function(){function t(t){var e=this;this.matchedRoute=void 0,this.hooks={},this._checkRoutesType(t),this.routes=t,this.params={},this.routes.map((function(t){return n(n({},t),{path:e._formatPath(t.path)})})),this._bind()}return t.prototype._bind=function(){var t=this;window.addEventListener("load",(function(e){return t.onWindowLoad(e)})),window.addEventListener("popstate",(function(e){return t.handlePopState(e)})),document.body.addEventListener("click",(function(e){return t._triggerRouterLink(e)}))},t.prototype._formatPath=function(t){try{if(t.match(/^(\/\#|\#\/)/))throw"bad url `"+t+"`";return""===t?"/":null===t.match(/^\//)&&null===t.match(/^\*$/)?"/"+t:t.match(/^\*$/)?"*":t}catch(t){throw new Error(t)}},t.prototype._checkRoutesType=function(t){try{if(!Array.isArray(t))throw new Error("The second argument must be an array of object");if(!t.every((function(t){return u.isRoute(t)})))throw new Error('Routes must have a "path" key (string) and a "action" key (function)')}catch(t){throw new Error(t)}},t.prototype._dispatch=function(t){var e,r=t.EventType,n=t.url,u=t.redirect,a=void 0!==u&&u;return o(this,void 0,void 0,(function(){var t,o,u;return i(this,(function(i){switch(i.label){case 0:if(i.trys.push([0,9,,10]),"string"!=typeof n)throw new Error("the path renseigned is not a string");if(!n||""===n.trim())throw new Error("No url renseigned");return a&&n.match(/^(http:\/\/|https:\/\/)/)?(window.location.replace(n),[2]):(t=this._makeRequestObject({url:window.location.href,EventType:r}),"load"!==r?[4,this._hookPromisify(this.hooks.leave,t)]:[3,2]);case 1:i.sent(),i.label=2;case 2:return"load"!==r?[4,this._hookPromisify(null===(e=this.matchedRoute)||void 0===e?void 0:e.leave,t)]:[3,4];case 3:i.sent(),i.label=4;case 4:return this.matchedRoute=this._match(n),this.matchedRoute?(this.matchedRoute.redirect&&this._dispatch({EventType:r,url:this.matchedRoute.redirect,redirect:!0}),o=this._makeRequestObject({url:n,EventType:r}),[4,this._hookPromisify(this.hooks.before,o)]):[3,7];case 5:return i.sent(),[4,this._hookPromisify(this.matchedRoute.before,o)];case 6:return i.sent(),"click"===r&&null===n.match(/^\*$/)&&history.pushState({key:n},document.title,n),"load"===r&&null===n.match(/^\*$/)&&history.replaceState({key:n},document.title,n),this.matchedRoute.action(o),[3,8];case 7:if(null!==n.match(/^\*$/))throw new Error("404 not found "+n);this._dispatch({EventType:r,url:"*"}),i.label=8;case 8:return[3,10];case 9:throw u=i.sent(),new Error(u);case 10:return[2]}}))}))},t.prototype._match=function(t){var e=this;return this.routes.find((function(r){var n,o=r.path,i=e._generateURLRegExp(o),u=t.match(i);return("/"===t||!i.test("/"))&&(!(!i.test(t)||!(null===(n=null==u?void 0:u[0])||void 0===n?void 0:n.includes(t)))&&(e.params=u.groups||{},!0))}))},t.prototype._generateURLRegExp=function(t){var e=(t.replace(/\{([^\s/\:]+)\:?(?:\((.*?)\))?\}/g,(function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return t[2]?"(?<"+t[1]+">"+t[2]+")":"(?<"+t[1]+">\\w+)"}))+"/?").replace(/[*]/g,"\\$&");return new RegExp(e)},t.prototype._hookPromisify=function(t,e){return o(this,void 0,void 0,(function(){return i(this,(function(r){switch(r.label){case 0:return t?[4,new Promise((function(r){t(e,(function(){r()}))}))]:[2];case 1:return r.sent(),[2]}}))}))},t.prototype._makeRequestObject=function(t){var e=this,r=t.url,n=t.EventType;return{redirect:function(t){return e._dispatch.call(e,{EventType:n,url:t,redirect:!0})},params:this.params,path:r}},t.prototype._triggerRouterLink=function(t){var e,r,n,u,a,c,s,l;return o(this,void 0,void 0,(function(){var o,h;return i(this,(function(i){return o=t.target,((null===(r=null===(e=null==o?void 0:o.closest("[data-router-link]"))||void 0===e?void 0:e.getAttribute)||void 0===r?void 0:r.call(e,"href"))||(null===(u=null===(n=null==o?void 0:o.closest("[data-router-link]"))||void 0===n?void 0:n.getAttribute)||void 0===u?void 0:u.call(n,"to")))&&(t.preventDefault(),h=(null===(c=null===(a=null==o?void 0:o.closest("[data-router-link]"))||void 0===a?void 0:a.getAttribute)||void 0===c?void 0:c.call(a,"href"))||(null===(l=null===(s=null==o?void 0:o.closest("[data-router-link]"))||void 0===s?void 0:s.getAttribute)||void 0===l?void 0:l.call(s,"to"))||"*",this._dispatch({EventType:t.type,url:h})),[2]}))}))},t.prototype.onWindowLoad=function(t){this._dispatch({EventType:t.type,url:window.location.pathname})},t.prototype.handlePopState=function(t){var e;this._dispatch({EventType:t.type,url:null===(e=t.state)||void 0===e?void 0:e.key})},t.prototype.push=function(t){if("string"!=typeof t)throw new Error("push(url): url given is not a string");this._dispatch({EventType:"click",url:t})},t.prototype.replace=function(t){if("string"!=typeof t)throw new Error("replace(url): url given is not a string");this._dispatch({EventType:"load",url:t,redirect:!0})},t}();e.KMRouter=a},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.isRoute=void 0,e.isRoute=function(t){return void 0!==t.path&&"string"==typeof t.path&&void 0!==t.action&&"function"==typeof t.action}}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,