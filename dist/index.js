!function(t,e){if("object"==typeof exports&&"object"==typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var n=e();for(var r in n)("object"==typeof exports?exports:t)[r]=n[r]}}(window,(function(){return function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)},o=this&&this.__awaiter||function(t,e,n,r){return new(n||(n=Promise))((function(o,i){function u(t){try{c(r.next(t))}catch(t){i(t)}}function a(t){try{c(r.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(u,a)}c((r=r.apply(t,e||[])).next())}))},i=this&&this.__generator||function(t,e){var n,r,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;u;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return u.label++,{value:i[1],done:!1};case 5:u.label++,r=i[1],i=[0];continue;case 7:i=u.ops.pop(),u.trys.pop();continue;default:if(!(o=(o=u.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){u=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){u.label=i[1];break}if(6===i[0]&&u.label<o[1]){u.label=o[1],o=i;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(i);break}o[2]&&u.ops.pop(),u.trys.pop();continue}i=e.call(t,u)}catch(t){i=[6,t],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}};Object.defineProperty(e,"__esModule",{value:!0});var u=function(){function t(t){var e=this;this.matchedRoute=void 0,this.routes=t,this.params={},this.routes.map((function(t){return r(r({},t),{path:e._formatPath(t.path)})})),this._bind()}return t.prototype._bind=function(){var t=this;window.addEventListener("load",(function(){return t.onWindowLoad()})),window.addEventListener("popstate",(function(){return t.handlePopState()})),document.body.addEventListener("click",(function(e){return t.handleRouterLink(e)}))},t.prototype._formatPath=function(t){if(t.match(/^(\/\#|\#\/)/))throw"bad url `"+t+"`";return""===t?"/":null===t.match(/^\//)&&null===t.match(/^\*$/)?"/"+t:t.match(/^\*$/)?"\\*":t},t.prototype._dispatch=function(t,e,n){return void 0===e&&(e=!0),void 0===n&&(n=!1),o(this,void 0,void 0,(function(){var r=this;return i(this,(function(u){switch(u.label){case 0:if(!t||""===t.trim())throw"No url renseigned";return n&&t.match(/^(http:\/\/|https:\/\/)/)?(window.location.replace(t),[2]):(this.matchedRoute=this._match(t),this.matchedRoute&&void 0!==this.matchedRoute.redirect?[4,this._dispatch(this.matchedRoute.redirect,!1,!0)]:[3,2]);case 1:return u.sent(),[3,6];case 2:return this.matchedRoute?(e?history.pushState({key:t},"",t):e||null!==t.match(/^\*$/)||history.replaceState({key:t},"",t),this.matchedRoute.action({redirect:function(t){return o(r,void 0,void 0,(function(){return i(this,(function(e){switch(e.label){case 0:return[4,this._dispatch.call(this,t,!1,!0)];case 1:return[2,e.sent()]}}))}))},params:this.params,path:window.location.pathname}),[3,6]):[3,3];case 3:return null!==t.match(/^\*$/)?[3,5]:[4,this._dispatch("*",!1)];case 4:return u.sent(),[3,6];case 5:throw"404 not found "+window.location.pathname;case 6:return[2]}}))}))},t.prototype._match=function(t){var e=this;return this.routes.find((function(n){var r=n.path,o=e._generateURLRegExp(r),i=t.match(o);return("/"===t||!o.test("/"))&&(!!(o.test(t)&&i&&i[0].includes(t))&&(e.params=i.groups||{},!0))}))},t.prototype._generateURLRegExp=function(t){return new RegExp(t.replace(/\{([^\s\/\:]+)\:?(?:\((.*?)\))?\}/g,(function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return t[2]?"(?<"+t[1]+">"+t[2]+")":"(?<"+t[1]+">\\w+)"}))+"/?")},t.prototype._triggerRouterLink=function(t){return o(this,void 0,void 0,(function(){var e,n;return i(this,(function(r){switch(r.label){case 0:return(e=t.target)&&null!==e.getAttribute("data-router-link")&&null!==e.getAttribute("href")?(n=e.getAttribute("href"),[4,this._dispatch(n)]):[3,2];case 1:r.sent(),r.label=2;case 2:return[2]}}))}))},t.prototype.onWindowLoad=function(){return o(this,void 0,void 0,(function(){return i(this,(function(t){switch(t.label){case 0:return[4,this._dispatch(window.location.pathname)];case 1:return t.sent(),[2]}}))}))},t.prototype.handlePopState=function(){return o(this,void 0,void 0,(function(){return i(this,(function(t){switch(t.label){case 0:return[4,this._dispatch(window.location.pathname)];case 1:return t.sent(),[2]}}))}))},t.prototype.handleRouterLink=function(t){return o(this,void 0,void 0,(function(){return i(this,(function(e){switch(e.label){case 0:return t.preventDefault(),[4,this._triggerRouterLink(t)];case 1:return e.sent(),[2]}}))}))},t}();e.KMRouter=u}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,