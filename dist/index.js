!function(t,e){if("object"==typeof exports&&"object"==typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var n=e();for(var o in n)("object"==typeof exports?exports:t)[o]=n[o]}}(window,(function(){return function(t){var e={};function n(o){if(e[o])return e[o].exports;var r=e[o]={i:o,l:!1,exports:{}};return t[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}return n.m=t,n.c=e,n.d=function(t,e,o){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:o})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)n.d(o,r,function(e){return t[e]}.bind(null,r));return o},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){"use strict";var o=this&&this.__assign||function(){return(o=Object.assign||function(t){for(var e,n=1,o=arguments.length;n<o;n++)for(var r in e=arguments[n])Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t}).apply(this,arguments)},r=this&&this.__awaiter||function(t,e,n,o){return new(n||(n=Promise))((function(r,i){function u(t){try{c(o.next(t))}catch(t){i(t)}}function a(t){try{c(o.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?r(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(u,a)}c((o=o.apply(t,e||[])).next())}))},i=this&&this.__generator||function(t,e){var n,o,r,i,u={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;u;)try{if(n=1,o&&(r=2&i[0]?o.return:i[0]?o.throw||((r=o.return)&&r.call(o),0):o.next)&&!(r=r.call(o,i[1])).done)return r;switch(o=0,r&&(i=[2&i[0],r.value]),i[0]){case 0:case 1:r=i;break;case 4:return u.label++,{value:i[1],done:!1};case 5:u.label++,o=i[1],i=[0];continue;case 7:i=u.ops.pop(),u.trys.pop();continue;default:if(!(r=(r=u.trys).length>0&&r[r.length-1])&&(6===i[0]||2===i[0])){u=0;continue}if(3===i[0]&&(!r||i[1]>r[0]&&i[1]<r[3])){u.label=i[1];break}if(6===i[0]&&u.label<r[1]){u.label=r[1],r=i;break}if(r&&u.label<r[2]){u.label=r[2],u.ops.push(i);break}r[2]&&u.ops.pop(),u.trys.pop();continue}i=e.call(t,u)}catch(t){i=[6,t],o=0}finally{n=r=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}};Object.defineProperty(e,"__esModule",{value:!0});var u=n(1),a=function(){function t(t){var e=this;this.matchedRoute=void 0,this.hooks={},this._checkRoutesType(t),this.routes=t,this.params={},this.routes.map((function(t){return o(o({},t),{path:e._formatPath(t.path)})})),this._bind()}return t.prototype._bind=function(){var t=this;window.addEventListener("load",(function(){return t.onWindowLoad()})),window.addEventListener("popstate",(function(){return t.handlePopState()})),document.body.addEventListener("click",(function(e){return r(t,void 0,void 0,(function(){return i(this,(function(t){switch(t.label){case 0:return[4,this._triggerRouterLink(e)];case 1:return[2,t.sent()]}}))}))}))},t.prototype._formatPath=function(t){if(t.match(/^(\/\#|\#\/)/))throw"bad url `"+t+"`";return""===t?"/":null===t.match(/^\//)&&null===t.match(/^\*$/)?"/"+t:t.match(/^\*$/)?"*":t},t.prototype._checkRoutesType=function(t){if(!Array.isArray(t))throw"The second argument must be an array of object";if(!t.every((function(t){return u.isRoute(t)})))throw"Routes must have a key path (string) and  a key action (function)"},t.prototype._dispatch=function(t,e,n,o){var u,a,c,s,l;return void 0===e&&(e=!0),void 0===n&&(n=!0),void 0===o&&(o=!1),r(this,void 0,void 0,(function(){var d,h=this;return i(this,(function(f){switch(f.label){case 0:if(!t||""===t.trim())throw"No url renseigned";return o&&t.match(/^(http:\/\/|https:\/\/)/)?(window.location.replace(t),[2]):(this.matchedRoute=this._match(t),(null===(u=this.matchedRoute)||void 0===u?void 0:u.redirect)?[4,this._dispatch(this.matchedRoute.redirect,!1,!0)]:[3,2]);case 1:return f.sent(),[3,12];case 2:return this.matchedRoute?(d={redirect:function(t){return r(h,void 0,void 0,(function(){return i(this,(function(e){switch(e.label){case 0:return[4,this._dispatch.call(this,t,!1,!0)];case 1:return[2,e.sent()]}}))}))},params:this.params,path:window.location.pathname},e?[4,null===(c=(a=this.hooks).leave)||void 0===c?void 0:c.call(a,d)]:[3,4]):[3,9];case 3:f.sent(),f.label=4;case 4:return e?[4,null===(l=(s=this.matchedRoute).leave)||void 0===l?void 0:l.call(s,d)]:[3,6];case 5:f.sent(),f.label=6;case 6:return[4,this._hookPromisify(this.hooks.before,d)];case 7:return f.sent(),[4,this._hookPromisify(this.matchedRoute.before,d)];case 8:return f.sent(),e&&n?history.pushState({key:t},"",t):n||null!==t.match(/^\*$/)||history.replaceState({key:t},"",t),this.matchedRoute.action(d),[3,12];case 9:return null!==t.match(/^\*$/)?[3,11]:[4,this._dispatch("*",!1)];case 10:return f.sent(),[3,12];case 11:throw"404 not found "+window.location.pathname;case 12:return[2]}}))}))},t.prototype._match=function(t){var e=this;return this.routes.find((function(n){var o,r,i=n.path,u=e._generateURLRegExp(i),a=t.match(u);return("/"===t||!u.test("/"))&&(!!(u.test(t)&&(null===(r=null===(o=a)||void 0===o?void 0:o[0])||void 0===r?void 0:r.includes(t)))&&(e.params=a.groups||{},!0))}))},t.prototype._generateURLRegExp=function(t){var e=(t.replace(/\{([^\s/\:]+)\:?(?:\((.*?)\))?\}/g,(function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return t[2]?"(?<"+t[1]+">"+t[2]+")":"(?<"+t[1]+">\\w+)"}))+"/?").replace(/[*]/g,"\\$&");return new RegExp(e)},t.prototype._hookPromisify=function(t,e){return r(this,void 0,void 0,(function(){return i(this,(function(n){switch(n.label){case 0:return t?[4,new Promise((function(n){t(e,(function(){n()}))}))]:[2];case 1:return n.sent(),[2]}}))}))},t.prototype._triggerRouterLink=function(t){var e,n,o,u,a,c,s,l,d,h,f,p,v,y,b,m;return r(this,void 0,void 0,(function(){var r,w;return i(this,(function(i){switch(i.label){case 0:return r=t.target,(null===(u=null===(n=null===(e=r)||void 0===e?void 0:e.closest("[data-router-link]"))||void 0===n?void 0:(o=n).getAttribute)||void 0===u?void 0:u.call(o,"href"))||(null===(l=null===(c=null===(a=r)||void 0===a?void 0:a.closest("[data-router-link]"))||void 0===c?void 0:(s=c).getAttribute)||void 0===l?void 0:l.call(s,"to"))?(t.preventDefault(),w=(null===(p=null===(h=null===(d=r)||void 0===d?void 0:d.closest("[data-router-link]"))||void 0===h?void 0:(f=h).getAttribute)||void 0===p?void 0:p.call(f,"href"))||(null===(m=null===(y=null===(v=r)||void 0===v?void 0:v.closest("[data-router-link]"))||void 0===y?void 0:(b=y).getAttribute)||void 0===m?void 0:m.call(b,"to"))||"*",[4,this._dispatch(w)]):[3,2];case 1:i.sent(),i.label=2;case 2:return[2]}}))}))},t.prototype.onWindowLoad=function(){return r(this,void 0,void 0,(function(){return i(this,(function(t){switch(t.label){case 0:return[4,this._dispatch(window.location.pathname,!1)];case 1:return t.sent(),[2]}}))}))},t.prototype.handlePopState=function(){return r(this,void 0,void 0,(function(){return i(this,(function(t){switch(t.label){case 0:return[4,this._dispatch(window.location.pathname)];case 1:return t.sent(),[2]}}))}))},t}();e.KMRouter=a},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.isRoute=function(t){return void 0!==t.path&&void 0!==t.action&&"function"==typeof t.action}}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,