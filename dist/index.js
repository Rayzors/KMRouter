!function(t,e){if("object"==typeof exports&&"object"==typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var n=e();for(var r in n)("object"==typeof exports?exports:t)[r]=n[r]}}(window,(function(){return function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)},o=this&&this.__awaiter||function(t,e,n,r){return new(n||(n=Promise))((function(o,i){function a(t){try{c(r.next(t))}catch(t){i(t)}}function u(t){try{c(r.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(a,u)}c((r=r.apply(t,e||[])).next())}))},i=this&&this.__generator||function(t,e){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function u(i){return function(u){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=e.call(t,a)}catch(t){i=[6,t],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,u])}}};Object.defineProperty(e,"__esModule",{value:!0});var a=n(1),u=function(){function t(t){var e=this;this.matchedRoute=void 0,this.hooks={},this._checkRoutesType(t),this.routes=t,this.params={},this.routes.map((function(t){return r(r({},t),{path:e._formatPath(t.path)})})),this._bind()}return t.prototype._bind=function(){var t=this;window.addEventListener("load",(function(){return t.onWindowLoad()})),window.addEventListener("popstate",(function(){return t.handlePopState()})),document.body.addEventListener("click",(function(e){return o(t,void 0,void 0,(function(){return i(this,(function(t){switch(t.label){case 0:return[4,this._triggerRouterLink(e)];case 1:return[2,t.sent()]}}))}))}))},t.prototype._formatPath=function(t){if(t.match(/^(\/\#|\#\/)/))throw"bad url `"+t+"`";return""===t?"/":null===t.match(/^\//)&&null===t.match(/^\*$/)?"/"+t:t.match(/^\*$/)?"*":t},t.prototype._checkRoutesType=function(t){if(!Array.isArray(t))throw"The second argument must be an array of object";if(!t.every((function(t){return a.isRoute(t)})))throw"Routes must have a key path (string) and  a key action (function)"},t.prototype._dispatch=function(t,e,n,r){var a,u,c,s,l,d,h,f,p;return void 0===e&&(e=!0),void 0===n&&(n=!0),void 0===r&&(r=!1),o(this,void 0,void 0,(function(){var v,y=this;return i(this,(function(b){switch(b.label){case 0:if(!t||""===t.trim())throw"No url renseigned";return r&&t.match(/^(http:\/\/|https:\/\/)/)?(window.location.replace(t),[2]):(this.matchedRoute=this._match(t),(null===(a=this.matchedRoute)||void 0===a?void 0:a.redirect)?[4,this._dispatch(this.matchedRoute.redirect,!1,!0)]:[3,2]);case 1:return b.sent(),[3,12];case 2:return this.matchedRoute?(e&&n?history.pushState({key:t},"",t):n||null!==t.match(/^\*$/)||history.replaceState({key:t},"",t),v={redirect:function(t){return o(y,void 0,void 0,(function(){return i(this,(function(e){switch(e.label){case 0:return[4,this._dispatch.call(this,t,!1,!0)];case 1:return[2,e.sent()]}}))}))},params:this.params,path:window.location.pathname},e?[4,null===(c=(u=this.hooks).leave)||void 0===c?void 0:c.call(u,v)]:[3,4]):[3,9];case 3:b.sent(),b.label=4;case 4:return e?[4,null===(l=(s=this.matchedRoute).leave)||void 0===l?void 0:l.call(s,v)]:[3,6];case 5:b.sent(),b.label=6;case 6:return[4,null===(h=(d=this.hooks).before)||void 0===h?void 0:h.call(d,v)];case 7:return b.sent(),[4,null===(p=(f=this.matchedRoute).before)||void 0===p?void 0:p.call(f,v)];case 8:return b.sent(),this.matchedRoute.action(v),[3,12];case 9:return null!==t.match(/^\*$/)?[3,11]:[4,this._dispatch("*",!1)];case 10:return b.sent(),[3,12];case 11:throw"404 not found "+window.location.pathname;case 12:return[2]}}))}))},t.prototype._match=function(t){var e=this;return this.routes.find((function(n){var r,o,i=n.path,a=e._generateURLRegExp(i),u=t.match(a);return("/"===t||!a.test("/"))&&(!!(a.test(t)&&(null===(o=null===(r=u)||void 0===r?void 0:r[0])||void 0===o?void 0:o.includes(t)))&&(e.params=u.groups||{},!0))}))},t.prototype._generateURLRegExp=function(t){var e=(t.replace(/\{([^\s/\:]+)\:?(?:\((.*?)\))?\}/g,(function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return t[2]?"(?<"+t[1]+">"+t[2]+")":"(?<"+t[1]+">\\w+)"}))+"/?").replace(/[*]/g,"\\$&");return new RegExp(e)},t.prototype._triggerRouterLink=function(t){var e,n,r,a,u,c,s,l,d,h,f,p,v,y,b,m;return o(this,void 0,void 0,(function(){var o,w;return i(this,(function(i){switch(i.label){case 0:return o=t.target,(null===(a=null===(n=null===(e=o)||void 0===e?void 0:e.closest("[data-router-link]"))||void 0===n?void 0:(r=n).getAttribute)||void 0===a?void 0:a.call(r,"href"))||(null===(l=null===(c=null===(u=o)||void 0===u?void 0:u.closest("[data-router-link]"))||void 0===c?void 0:(s=c).getAttribute)||void 0===l?void 0:l.call(s,"to"))?(t.preventDefault(),w=(null===(p=null===(h=null===(d=o)||void 0===d?void 0:d.closest("[data-router-link]"))||void 0===h?void 0:(f=h).getAttribute)||void 0===p?void 0:p.call(f,"href"))||(null===(m=null===(y=null===(v=o)||void 0===v?void 0:v.closest("[data-router-link]"))||void 0===y?void 0:(b=y).getAttribute)||void 0===m?void 0:m.call(b,"to"))||"*",[4,this._dispatch(w)]):[3,2];case 1:i.sent(),i.label=2;case 2:return[2]}}))}))},t.prototype.onWindowLoad=function(){return o(this,void 0,void 0,(function(){return i(this,(function(t){switch(t.label){case 0:return[4,this._dispatch(window.location.pathname,!1)];case 1:return t.sent(),[2]}}))}))},t.prototype.handlePopState=function(){return o(this,void 0,void 0,(function(){return i(this,(function(t){switch(t.label){case 0:return[4,this._dispatch(window.location.pathname)];case 1:return t.sent(),[2]}}))}))},t}();e.KMRouter=u},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.isRoute=function(t){return void 0!==t.path&&void 0!==t.action&&"function"==typeof t.action}}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,