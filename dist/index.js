!function(t,e){if("object"==typeof exports&&"object"==typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var n=e();for(var r in n)("object"==typeof exports?exports:t)[r]=n[r]}}(window,(function(){return function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)},o=this&&this.__awaiter||function(t,e,n,r){return new(n||(n=Promise))((function(o,i){function u(t){try{c(r.next(t))}catch(t){i(t)}}function a(t){try{c(r.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(u,a)}c((r=r.apply(t,e||[])).next())}))},i=this&&this.__generator||function(t,e){var n,r,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;u;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return u.label++,{value:i[1],done:!1};case 5:u.label++,r=i[1],i=[0];continue;case 7:i=u.ops.pop(),u.trys.pop();continue;default:if(!(o=(o=u.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){u=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){u.label=i[1];break}if(6===i[0]&&u.label<o[1]){u.label=o[1],o=i;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(i);break}o[2]&&u.ops.pop(),u.trys.pop();continue}i=e.call(t,u)}catch(t){i=[6,t],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}};Object.defineProperty(e,"__esModule",{value:!0});var u=n(1),a=function(){function t(t){var e=this;this.matchedRoute=void 0,this.hooks={},this._checkRoutesType(t),this.routes=t,this.params={},this.routes.map((function(t){return r(r({},t),{path:e._formatPath(t.path)})})),this._bind()}return t.prototype._bind=function(){var t=this;window.addEventListener("load",(function(e){return t.onWindowLoad(e)})),window.addEventListener("popstate",(function(e){return t.handlePopState(e)})),document.body.addEventListener("click",(function(e){return t._triggerRouterLink(e)}))},t.prototype._formatPath=function(t){if(t.match(/^(\/\#|\#\/)/))throw"bad url `"+t+"`";return""===t?"/":null===t.match(/^\//)&&null===t.match(/^\*$/)?"/"+t:t.match(/^\*$/)?"*":t},t.prototype._checkRoutesType=function(t){if(!Array.isArray(t))throw"The second argument must be an array of object";if(!t.every((function(t){return u.isRoute(t)})))throw"Routes must have a key path (string) and  a key action (function)"},t.prototype._dispatch=function(t){var e,n,r=t.EventType,u=t.url,a=t.redirect,c=void 0!==a&&a;return o(this,void 0,void 0,(function(){var t,o;return i(this,(function(i){switch(i.label){case 0:if(!u||""===u.trim())throw"No url renseigned";return c&&u.match(/^(http:\/\/|https:\/\/)/)?(window.location.replace(u),[2]):(t=this._createRequestObject({url:u,EventType:r}),"load"!==r?[4,this._hookPromisify(this.hooks.leave,t)]:[3,2]);case 1:i.sent(),i.label=2;case 2:return"load"!==r?[4,this._hookPromisify(null===(e=this.matchedRoute)||void 0===e?void 0:e.leave,t)]:[3,4];case 3:i.sent(),i.label=4;case 4:return this.matchedRoute=this._match(u),(null===(n=this.matchedRoute)||void 0===n?void 0:n.redirect)?(this._dispatch({EventType:r,url:this.matchedRoute.redirect,redirect:!0}),[3,9]):[3,5];case 5:return this.matchedRoute?(o=this._createRequestObject({url:u,EventType:r}),[4,this._hookPromisify(this.hooks.before,o)]):[3,8];case 6:return i.sent(),[4,this._hookPromisify(this.matchedRoute.before,o)];case 7:return i.sent(),"click"===r&&history.pushState({key:u},document.title,u),"load"===r&&null===u.match(/^\*$/)&&history.replaceState({key:u},document.title,u),this.matchedRoute.action(o),[3,9];case 8:if(null!==u.match(/^\*$/))throw"404 not found "+u;this._dispatch({EventType:r,url:"*"}),i.label=9;case 9:return[2]}}))}))},t.prototype._match=function(t){var e=this;return this.routes.find((function(n){var r,o,i=n.path,u=e._generateURLRegExp(i),a=t.match(u);return("/"===t||!u.test("/"))&&(!!(u.test(t)&&(null===(o=null===(r=a)||void 0===r?void 0:r[0])||void 0===o?void 0:o.includes(t)))&&(e.params=a.groups||{},!0))}))},t.prototype._generateURLRegExp=function(t){var e=(t.replace(/\{([^\s/\:]+)\:?(?:\((.*?)\))?\}/g,(function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return t[2]?"(?<"+t[1]+">"+t[2]+")":"(?<"+t[1]+">\\w+)"}))+"/?").replace(/[*]/g,"\\$&");return new RegExp(e)},t.prototype._hookPromisify=function(t,e){return o(this,void 0,void 0,(function(){return i(this,(function(n){switch(n.label){case 0:return t?[4,new Promise((function(n){t(e,(function(){n()}))}))]:[2];case 1:return n.sent(),[2]}}))}))},t.prototype._createRequestObject=function(t){var e=this,n=t.url,r=t.EventType;return{redirect:function(t){return e._dispatch.call(e,{EventType:r,url:t,redirect:!0})},params:this.params,path:n}},t.prototype._triggerRouterLink=function(t){var e,n,r,u,a,c,l,s,d,h,f,p,v,y,b,m;return o(this,void 0,void 0,(function(){var o,_;return i(this,(function(i){return o=t.target,((null===(u=null===(n=null===(e=o)||void 0===e?void 0:e.closest("[data-router-link]"))||void 0===n?void 0:(r=n).getAttribute)||void 0===u?void 0:u.call(r,"href"))||(null===(s=null===(c=null===(a=o)||void 0===a?void 0:a.closest("[data-router-link]"))||void 0===c?void 0:(l=c).getAttribute)||void 0===s?void 0:s.call(l,"to")))&&(t.preventDefault(),_=(null===(p=null===(h=null===(d=o)||void 0===d?void 0:d.closest("[data-router-link]"))||void 0===h?void 0:(f=h).getAttribute)||void 0===p?void 0:p.call(f,"href"))||(null===(m=null===(y=null===(v=o)||void 0===v?void 0:v.closest("[data-router-link]"))||void 0===y?void 0:(b=y).getAttribute)||void 0===m?void 0:m.call(b,"to"))||"*",this._dispatch({EventType:t.type,url:_})),[2]}))}))},t.prototype.onWindowLoad=function(t){this._dispatch({EventType:t.type,url:window.location.pathname})},t.prototype.handlePopState=function(t){var e;this._dispatch({EventType:t.type,url:null===(e=t.state)||void 0===e?void 0:e.key})},t}();e.KMRouter=a},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.isRoute=function(t){return void 0!==t.path&&void 0!==t.action&&"function"==typeof t.action}}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,